[
  {
    "path": "posts/welcome/",
    "title": "Welcome to Lefkios Blog",
    "description": "Welcome to our new blog, Lefkios Blog. We hope you enjoy \nreading what we have to say!",
    "author": [
      {
        "name": "Nora Jones",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2020-12-23",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2020-12-23T18:32:38+03:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-12-23-a-workflow-with-labelled-data/",
    "title": "A workflow with labelled data",
    "description": "I love labelled data",
    "author": [
      {
        "name": "Lefkios  Paikousis",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2020-12-23",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nThe Libraries\r\nRead the data and data-dictionary\r\nFactors and order of the value labels\r\nPlots\r\nUse the labels_list when defining plot labels.\r\nUse the labels_vector in the facet_warp\r\n\r\n\r\nThe Libraries\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(labelled)\r\nlibrary(gtsummary)\r\nlibrary(readxl)\r\n\r\n\r\n\r\nI usually work with survey data that come in the form of a spreadsheet (usually from google forms).\r\nThe variable names are long and highly descriptive of what information the variable contains, but that long of a name, makes it very hard to work with while wrangling the dataset.\r\nWhat I want is to keep the original variable name as a label and rename the variable names with new names\r\nTo demontrate my workflow, I created a sample dataset to work with. You can download it from github\r\nThe dataset is stored as an excel file, and has two worksheets.\r\nIn the worksheet data you can see the raw data, and\r\nIn the worksheet labels you can find a sort of data dictionary\r\nIn the labels worksheet I keep a record of the original variable names as label and on the adjacent column, I type a short but readable column name for the variable.\r\nworksheet:labelsRead the data and data-dictionary\r\nLet’s read in the data\r\n\r\n\r\npath = \"sample_survey.xlsx\"\r\ndta <- readxl::read_xlsx(path)\r\n\r\nglimpse(dta)\r\n\r\n\r\nRows: 7\r\nColumns: 6\r\n$ id                                   <dbl> 1, 2, 3, 4, 5, 6, 7\r\n$ `Which restaurant have you visited?` <chr> \"Limassol\", \"Nicosia...\r\n$ `I am happy with the greeting`       <chr> \"Agree\", \"Strongly d...\r\n$ `I enjoyed the food`                 <chr> \"Neutral\", \"Neutral\"...\r\n$ `I am  satisfied with the cost`      <chr> \"Agree\", \"Strongly d...\r\n$ `How satisfied you are overall`      <chr> \"Very satisfied\", \"V...\r\n\r\nThe dataset contains 6 columns\r\nRead in the labels worksheet for the column dictionary\r\n\r\n\r\ndta_labels <- readxl::read_xlsx(path, sheet = \"labels\")\r\n\r\ndta_labels\r\n\r\n\r\n# A tibble: 6 x 2\r\n  label                              name      \r\n  <chr>                              <chr>     \r\n1 id                                 id        \r\n2 Which restaurant have you visited? restaurant\r\n3 I am happy with the greeting       greeting  \r\n4 I enjoyed the food                 food      \r\n5 I am  satisfied with the cost      cost      \r\n6 How satisfied you are overall      overall   \r\n\r\nNow,\r\nChange the column names of the dataset to the short names in the dictionary\r\nSet the labels of the columns via the labelled::var_label() function\r\nCreate a label_list object, which is a named list where the names of the list are variable names and the values of the list are the variable labels\r\nAlso, save a label_vector named vector with the same informationas the label_list\r\n\r\n\r\nnames(dta) <- dta_labels$name\r\n\r\nvar_label(dta) <- dta_labels$label\r\n\r\nlabels_list <- var_label(dta)\r\nlabels_vector <-  var_label(dta, unlist = TRUE)\r\n\r\nlabels_list\r\n\r\n\r\n$id\r\n[1] \"id\"\r\n\r\n$restaurant\r\n[1] \"Which restaurant have you visited?\"\r\n\r\n$greeting\r\n[1] \"I am happy with the greeting\"\r\n\r\n$food\r\n[1] \"I enjoyed the food\"\r\n\r\n$cost\r\n[1] \"I am  satisfied with the cost\"\r\n\r\n$overall\r\n[1] \"How satisfied you are overall\"\r\n\r\nHave a look at the dataset names now\r\n\r\n\r\nglimpse(dta)\r\n\r\n\r\nRows: 7\r\nColumns: 6\r\n$ id         <dbl> 1, 2, 3, 4, 5, 6, 7\r\n$ restaurant <chr> \"Limassol\", \"Nicosia\", \"Nicosia\", \"Larnaka\", \"...\r\n$ greeting   <chr> \"Agree\", \"Strongly disagree\", \"Neutral\", \"Neut...\r\n$ food       <chr> \"Neutral\", \"Neutral\", \"Strongly agree\", \"Neutr...\r\n$ cost       <chr> \"Agree\", \"Strongly disagree\", \"Agree\", \"Strong...\r\n$ overall    <chr> \"Very satisfied\", \"Very dissatisfied\", \"Neutra...\r\n\r\nNow its very easy to keep using the variable names in your code, but variable labels are rendered in the tables when using {gtsummary} for example.\r\n\r\n\r\ndta %>%\r\n  select(overall,restaurant) %>% \r\n  tbl_summary(\r\n    by  = restaurant\r\n  ) \r\n\r\n\r\npreserve6684e36e55d25a50\r\n\r\nFactors and order of the value labels\r\nThe order of the satifaction levels in the previous table, is not the most appropriate. It should read from Very dissatisfied down to Very satisfied.\r\nOne way to accomplish this is to turn the variable into a factor. However, one problem arises now, where the label for the overall variable is gone. That is an inherent behaviour of dplyr::mutate() where it strips down these attributes off the variables that you manipulate.\r\nSee the overall title in the table below\r\n\r\n\r\ndta %>%\r\n  mutate(\r\n    overall  =  factor(overall,levels  = c(\"Very dissatisfied\", \"Dissatisfied\", \"Neutral\", \"Satisfied\",\r\n                                           \"Very satisfied\"))\r\n  ) %>% \r\n  select(overall,restaurant) %>% \r\n  tbl_summary(\r\n    by  = restaurant\r\n  ) \r\n\r\n\r\npreserve4ba091446bcf762a\r\n\r\nYou can easily solve this, using the labelled::set_variable_names() function. This function can be used in the dplyr chain since it takes a data argument.\r\nWhat you need to use is the labels_list we have saved before and pass it in the .labels argument of the set_variable_names()\r\n\r\n\r\ndta %>%\r\n  mutate(\r\n    overall  =  factor(overall,levels  = c(\"Very dissatisfied\", \r\n                                           \"Dissatisfied\", \r\n                                           \"Neutral\", \r\n                                           \"Satisfied\",\r\n                                           \"Very satisfied\"))\r\n  ) %>% \r\n  set_variable_labels(.labels=labels_list) %>%  #After mutating, the label information of the `overall` variable is gone.\r\n  select(overall,restaurant) %>% \r\n  tbl_summary(\r\n    by  = restaurant\r\n  ) \r\n\r\n\r\npreserve81e81c4bdef5563c\r\n\r\nImportant to say that:\r\nUsing the labels_list object we do not worry about the order of the variables as the matchingis done on the names of the variables.\r\nThere is no problem if the data has more variables than what the labels_list contains as long as all the variables contained in the labels_list are also in the dataset we want to label\r\nPlots\r\nUse the labels_list when defining plot labels.\r\n\r\n\r\ndta %>%\r\n  mutate(\r\n    overall  =  factor(overall,levels  = c(\"Very dissatisfied\", \r\n                                           \"Dissatisfied\", \r\n                                           \"Neutral\", \r\n                                           \"Satisfied\",\r\n                                           \"Very satisfied\"))\r\n  ) %>% \r\n  mutate(\r\n    restaurant = fct_collapse(restaurant, limassol  =   c(\"Limassol\", \"Larnaka\"), other_level = \"other\")\r\n  ) %>% \r\n  set_variable_labels(.labels=labels_list) %>%  #After mutating, the label information of the `overall` variable is gone.\r\n  count(overall) %>% \r\n  ggplot(aes(overall, n))+\r\n  geom_col()+\r\n  coord_flip()+\r\n  labs(x=labels_list[[\"overall\"]])\r\n\r\n\r\n\r\n\r\nUse the labels_vector in the facet_warp\r\nUsually, with these kind of questions(a series of likert scale questions), I want to plot many questions at the same plot. One way to do this is by tranforming all the data into a long format and get the counts (or proportions) of ech response to each question in a long table. Then we plot it by faceting the graph by the question.\r\n\r\n\r\nfaceted_plot <- \r\n  dta %>%\r\n  select(greeting, food, cost) %>% \r\n  pivot_longer(everything(), \r\n               names_to = \"attribute\",\r\n               values_to= \"rating\") %>% \r\n  count(attribute,  rating) %>% \r\n  mutate(\r\n    rating = factor(rating, c(\"Strongly agree\", \"Agree\", \"Neutral\", \"Disagree\", \"Strongly disagree\"))\r\n  ) %>% \r\n  ggplot(aes(rating, n))+\r\n  geom_col()+\r\n  coord_flip()+\r\n  facet_wrap(~attribute)\r\n\r\nfaceted_plot\r\n\r\n\r\n\r\n\r\nWhen using facet wrap in ggplots we get the values of the facet column in the strip text. However, since the facet column is actually a column that holds the question, it would be great to have the long label in the facet strip instead of the short name.\r\nThankfully we don’t have to do this manually. We can utilise the label_vector we saved earlier, and the underated ggplot function as_labeller (or sometimes the labeller function).You can read more about as_labeller and labeller for many more (and more usufull) use cases.\r\n\r\n\r\nfaceted_plot+\r\n  facet_wrap(~attribute,labeller = as_labeller(labels_vector))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2020-12-23-a-workflow-with-labelled-data/a-workflow-with-labelled-data_files/figure-html5/unnamed-chunk-9-1.png",
    "last_modified": "2020-12-23T21:10:54+03:00",
    "input_file": "a-workflow-with-labelled-data.utf8.md"
  }
]
